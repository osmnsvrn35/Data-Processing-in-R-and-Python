sD<-A-b
sD
(mean(A)-mean(b)-0)/(sd(test)/sqrt(10))
(mean(A)-mean(b)-0)/(sd(test)/sqrt(10))
(mean(A)-mean(b)-0)/(sd(sD)/sqrt(10))
1-pnorm(-4.0621)
pnorm(-4.0621)
(mean(b)-mean(A)-0)/(sd(sD)/sqrt(10))
pnorm(4.0621)
1-pnorm(4.0621)
0.1 == (0.3-0.2)
A<-c(0.7,-1.6,-0.2,-1.2,-0.1,3.4,3.7,0.8,0,2)
b<-c(1.9,0.8,1.1,0.1,-0.1,4.4,5.5,1.6,4.6,3.4)
(mean(b)-mean(A)-0)/(sd(sD)/sqrt(10))
1-pnorm(4.0621)
X<-5
X<-C[1:15]
X<-C[1:15]
X<-C[seq(1:15)]
X<-C[seq(1,15)]
X<-c(seq(1,15))
clear
clr
clc
x
X<-c(seq(1,15))
X<-rnorm(100,c(1,2,10))
x
x
X
typeof(x)
typeof(X)
X
X
X
x
x
x
x
x<-rnorm(100,c(1,2,10))
x
x[1] <- 100
x
typeof(x)
clc
clear
typeof(x)
x
x
x<-rnorm(100,c(1,2,10))
x
typeof(x)
x[1] <- 100
x
typeof(x)
type.convert(x,integer)
type.convert(x,double)
typeof(c(TRUE,1L,2.5,6+9i,"anna")
)
typeof(c(TRUE,1L,2.5,6+9i,"anna",sum)
y<-c(TRUE,1L,2.5,6+9i,"anna",sum)
y <- c(TRUE,1L,2.5,6+9i,"anna",sum)
y
y <- c(TRUE,1L,2.5,6+9i,"anna",sum)
x <- c(1,2,3)
x+1
x<-c(1,2,3,x)
x
x
x<-c(1,2,3,g)
x<-c(1,2,3,'g')
x
x+1
x[-g]
x[-'g']
x['-g']
x
x[4=0]
x<- data.frame(a=1:10,b=letters[1:10],c=10:1)
y<- data.frame(d=LETTERS[1:10],c= sample(20,10))
?merge
library('nycflights13')
install.packages("nycflights13")
library('nycflights13')
x<- data.frame(a=1:10,b=letters[1:10],c=10:1)
y<- data.frame(d=LETTERS[1:10],c= sample(20,10))
x
y
merge(x,y)
ref <- sqldf("SELECT *
FROM flights
LEFT JOIN planes ON flights.tailnum=planes.tailnum")
install.packages("sqldf")
ref <- sqldf("SELECT *
FROM flights
LEFT JOIN planes ON flights.tailnum=planes.tailnum")
library('sqldf')
#a
ref <- sqldf("SELECT *
FROM flights
LEFT JOIN planes ON flights.tailnum=planes.tailnum")
result_base1 <- head(df,10)
sqldf_1 <- function(Posts, Users){
# Input the solution here
#
result_sqldf1<-sqldf(
"
SELECT Location, COUNT(*) AS Count
FROM (
SELECT Posts.OwnerUserId, Users.Id, Users.Location
FROM Users
JOIN Posts ON Users.Id = Posts.OwnerUserId
) AS subquery
WHERE Location NOT IN ('')
GROUP BY Location
ORDER BY Count DESC
LIMIT 10
")
return(result_sqldf1)
}
base_1 <- function(Posts, Users){
# Input the solution here
#
#I start with realizing the in the inner part of the FROM clause
user_post_join <- merge(Users,Posts,by.x = "Id",by.y = "OwnerUserId")
#filtering out the empty locations
location_filter <- user_post_join[user_post_join$Location != '',]
#table will count each occurence of location
location_count <-table(location_filter$Location)
#I am creating the data.frame by the data I had by count and naming the columns
df<-data.frame(Location = names(location_count),Count = as.numeric(location_count))
#Finally applying the decreasing order and the choosing the first 10 rows
df<-df[order(df$Count,decreasing = TRUE),]
result_base1 <- head(df,10)
#It will fix the IDs to  sequential
row.names(result_base1) <- NULL
##compare(result_base1,result_sqldf1,allowAll = TRUE)
return(result_base1)
}
dplyr_1 <- function(Posts, Users){
# Input the solution here
#
#Firstly I start with applying join in the inner part of FROM clause
joined_tables_dplyr1 <- inner_join(Posts,Users,by=c("OwnerUserId"="Id"))
#by using pipelining I select the necessary columns
joined_tables_dplyr1%>%
select(OwnerUserId,Id,Location)
#finally I use the result of the inner part of FROM cluase and applying next steps
result_dplyr1<-joined_tables_dplyr1 %>%
#I basically use dpylr functions to filter,choosing first 10 elements and groupping by location
filter(Location != "")%>%
group_by(Location) %>%
summarise(Count = n())%>%
arrange(desc(Count))%>%
slice_head(n=10)
#compare(result_dplyr1,result_sqldf1,allowAll = TRUE)
return(result_dplyr1)
}
data.table_1 <- function(Posts, Users){
# Input the solution here
#
# Converting the DFs into data.table
Posts<-data.table(Posts)
Users<-data.table(Users)
#I start by finding the table (inside of the first FROM)
#I will realize the JOIN
joined_tables_DT1<-Posts[Users, on = .(OwnerUserId = Id),nomatch=0]
#now I select the necessary columns and tab will be created
tab_DT1<-joined_tables_DT1[, .(OwnerUserId,Id,Location)]
#now I will remove empty locations
filtered_DT1<-tab_DT1[!Location %in% c("")]
#Group by is applied
groupby_DT1 <- filtered_DT1[ , .(Count = .N),by= Location]
#applying the descending order by count and the LIMIT 10
ordered_DT1 <- setorder(groupby_DT1,-Count)
result_DT1 <- ordered_DT1[1:10]
#compare(result_DT1,result_sqldf1,allowAll = TRUE)
return(result_DT1)
}
sqldf_2 <- function(Posts, PostsLinks){
# Input the solution here
#
tab<-sqldf("SELECT RelatedPostId AS PostId, COUNT(*) AS NumLinks
FROM PostsLinks
GROUP BY RelatedPostId")
result_sqldf2<-sqldf("
SELECT Posts.Title, RelatedTab.NumLinks
FROM(
tab
) AS RelatedTab
JOIN Posts ON RelatedTab.PostId=Posts.Id
WHERE Posts.PostTypeId=1
ORDER BY NumLinks DESC
")
return(result_sqldf2)
}
base_2 <- function(Posts, PostsLinks){
# Input the solution here
#
#I start with making the RelatedTab table
#Firstly ,I group the data by RelatedPostId
tab_base2<-table(PostsLinks$RelatedPostId)
#tab_base2 contains vectors first element is Id second is NumLink I will create dataframe of them
tab_base2_df <- data.frame(tab_base2)
colnames(tab_base2_df)<- c("PostId", "NumLinks")
#Performing the inner join
joined_df_base2 <- merge(tab_base2_df,Posts,by.x="PostId",by.y="Id")
#applying the Where clause
filtered_df_base2<-joined_df_base2[joined_df_base2$PostTypeId == 1,]
#Ordering by descending NumLink order
order_df_base2 <- filtered_df_base2[order(filtered_df_base2$NumLinks,decreasing = TRUE),]
#Selecting only numlinks and the titles
result_base2 <- data.frame(order_df_base2$Title,order_df_base2$NumLinks)
colnames(result_base2)<-c("Title","NumLinks")
return(result_base2)
}
dplyr_2 <- function(Posts, PostsLinks){
# Input the solution here
#
#I start with creating the RelatedTab Table
RelatedTab_dplyr2<-PostsLinks%>%
#creating the tab part
group_by(PostId = RelatedPostId)%>%
summarise(NumLinks = n())
#RelatedTab table is created now I can apply inner join
joined_dplyr2<-inner_join(RelatedTab_dplyr2,Posts,by=c("PostId"="Id"))
result_dplyr2<-joined_dplyr2 %>%
#where cluase and order will be applied
filter(PostTypeId == 1)%>%
arrange(desc(NumLinks))%>%
#selecting the title and numlinks
select(Title,NumLinks)
return(result_dplyr2)
}
data.table_2 <- function(Posts, PostsLinks){
# Input the solution here
#
PostsLinks_DT <- data.table(PostsLinks)
Posts_DT<- data.table(Posts)
#Firstly I start with finding the RelatedTab table
# Group by RelatedPostId and count occurrences
RelatedTab_DT2 <- PostsLinks_DT[, .(NumLinks = .N), by = RelatedPostId]
# Rename the columns as per your SELECT statement
setnames(RelatedTab_DT2, c("PostId", "NumLinks"))
#Now we can realize the join since we have created the RelatedTab
joined_tables_DT2 <- Posts_DT[RelatedTab_DT2, on = .(Id= PostId ), nomatch = 0]
#I will filter the PosttypeId==1
filtered_DT2<-joined_tables_DT2[PostTypeId %in% c("1")]
#I will use setorder function to order it decreasingly
setorder(filtered_DT2,-NumLinks)
#Finally I will select the necessary columns
result_DT2<-filtered_DT2[, .(Title,NumLinks)]
return(result_DT2)
}
sqldf_3 <- function(Posts, Users, Comments){
# Input the solution here
#
sqldf("SELECT Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location
FROM (
SELECT Posts.OwnerUserId, Posts.Title, Posts.CommentCount, Posts.ViewCount,
CmtTotScr.CommentsTotalScore
FROM (
SELECT PostId, SUM(Score) AS CommentsTotalScore
FROM Comments
GROUP BY PostId
) AS CmtTotScr
JOIN Posts ON Posts.Id = CmtTotScr.PostId
WHERE Posts.PostTypeId=1
) AS PostsBestComments
JOIN Users ON PostsBestComments.OwnerUserId = Users.Id
ORDER BY CommentsTotalScore DESC
")->tab3
result_sqldf3<-sqldf("SELECT * FROM tab3 LIMIT 10")
return(result_sqldf3)
}
base_3 <- function(Posts, Users, Comments){
# Input the solution here
#
#group by post ID (CmtToScr creation)
inner_tab_base3<-aggregate(Score ~ PostId,data=Comments,FUN=sum)
colnames(inner_tab_base3) <- c("PostId","CommentsTotalScore")
#now I will implement next select firstly I will start with join and filtering
joined_cmttoscr_base3 <- merge(Posts,inner_tab_base3,by.x="Id",by.y="PostId")
filtered_cmttoscr_base3 <- joined_cmttoscr_base3[joined_cmttoscr_base3$PostTypeId==1,]
#applying the select clause
bestcomments_base3 <- filtered_cmttoscr_base3[c("OwnerUserId", "Title", "CommentCount", "ViewCount", "CommentsTotalScore")]
#now PostsBestComments is created and I will apply join and order by
join_bestcomments_base3 <- merge(Users,bestcomments_base3,by.x = "Id",by.y = "OwnerUserId")
ordered_bestcomments_base3<- join_bestcomments_base3[order(join_bestcomments_base3$CommentsTotalScore,decreasing = TRUE),]
limited_bestcomments_base3<- head(ordered_bestcomments_base3,10)
#now I will select
result_base3<-limited_bestcomments_base3[c("Title","CommentCount","ViewCount","CommentsTotalScore","DisplayName","Reputation","Location")]
#I will fix row IDs to sequential
row.names(result_base3) <- NULL
return(result_base3)
}
dplyr_3 <- function(Posts, Users, Comments){
# Input the solution here
#
#I start by creating the CmtToScr table
CmtToScr_dplyr3<-Comments %>%
group_by(PostId)%>%
summarise(CommentsTotalScore = sum(Score))
#As we created the table we can now apply the join
CmtToScr_joined_dplyr3<-inner_join(Posts,CmtToScr_dplyr3,by=c("Id"="PostId"))
#here I apply filter and selecting the necessary columns to create PostBestComments table
PostBestComments_dplyr3<-CmtToScr_joined_dplyr3 %>%
filter(PostTypeId == 1)%>%
select(OwnerUserId,Title,CommentCount,ViewCount,CommentsTotalScore)
#As we created PostBestComments we can apply the join
PostBestComments_joined_dplyr3<- inner_join(PostBestComments_dplyr3,Users,by=c("OwnerUserId"="Id"))
#Finally I apply descreasing order by CommentsTotalScore, limiting with first 10 element and selecting columns
result_dplyr3<-PostBestComments_joined_dplyr3 %>%
arrange(desc(CommentsTotalScore))%>%
slice_head(n=10)%>%
select(Title,CommentCount,ViewCount,CommentsTotalScore,DisplayName,Reputation,Location)
return(result_dplyr3)
}
data.table_3 <- function(Posts, Users, Comments){
# Input the solution here
#
Posts_DT<-data.table(Posts)
Users_DT<-data.table(Users)
Comments_DT<-data.table(Comments)
#I start solving it by finding the CmtTotScr table
# Group by PostId and Sum Scores
CmtTotScr_DT3 <- Comments_DT[, .(CommentsTotalScore = sum(Score)), by = PostId]
#We created the CmtTotScr table now we make join
CmtTotScr_join_DT3 <- Posts_DT[CmtTotScr_DT3, on = .(Id= PostId ), nomatch = 0]
#And filter by postTypeId
CmtTotScr_filtered_DT3<-CmtTotScr_join_DT3[PostTypeId %in% c("1")]
#now we select the necesassry columns and PostBestComments table will be created
PostBestComments_DT3<-CmtTotScr_filtered_DT3[, .(OwnerUserId,Title,CommentCount,
ViewCount,CommentsTotalScore)]
#As we created the PostBestComments table we realize the join
joined_DT3 <- Users_DT[PostBestComments_DT3, on = .( Id = OwnerUserId), nomatch = 0]
#Now I order it decreasing by commentstotalscore and limit by 10
setorder(joined_DT3,-CommentsTotalScore)
filtered_DT3<-joined_DT3[1:10]
#finally selecting the result table's columns
result_DT3<-filtered_DT3[, .(Title,CommentCount, ViewCount,
CommentsTotalScore, DisplayName, Reputation, Location)]
return(result_DT3)
}
# -----------------------------------------------------------------------------#
# -----------------------------------------------------------------------------#
# Task 4
# -----------------------------------------------------------------------------#
Questions_dplyr5 <- Posts %>%
#what I only needed to do is filtering and we will select the all columns
filter(PostTypeId == 1)
Posts <- read.csv("travel_stackexchange/Posts.csv.gz")
setwd("C:/Users/osmns/Desktop/WUT/SEMESTER RE-5/DPRPy/FirstProject")
Posts <- read.csv("travel_stackexchange/Posts.csv.gz")
Users <- read.csv("travel_stackexchange/Users.csv.gz")
PostsLinks <- read.csv("travel_stackexchange/PostLinks.csv.gz")
Comments <- read.csv("travel_stackexchange/Comments.csv.gz")
library(dplyr)
library(data.table)
library(microbenchmark)
library(ggplot2)
library(compare)
library(sqldf)
BestAnswers_dplyr5 <- Posts %>%
#filtering by posttypeid
filter(PostTypeId == 2) %>%
#Groupping by parent Id
group_by(ParentId)%>%
#Finding the Id which has max score for each parentId and the Max score's itself
summarise(Id= Id[which.max(Score)],MaxScore = max(Score))%>%
#relocating the columns as in the sqldf result
relocate(c("Id","ParentId","MaxScore"))
#Lets find Questions part which is relatively easy
Questions_dplyr5 <- Posts %>%
#what I only needed to do is filtering and we will select the all columns
filter(PostTypeId == 1)
#Lets join the Question and BestAnswers
Question_BestAns_join_dplyr5<-inner_join(Questions_dplyr5,BestAnswers_dplyr5,by=c("Id"="ParentId"))
#Id.y for Answers Id
#Make the other join
join_dplyr5 <- inner_join(Posts,Question_BestAns_join_dplyr5,by=c("Id"="AcceptedAnswerId"))
result_dplyr5 <-join_dplyr5%>%
#mutate will add another column mutating from 2 existing columns
mutate(Difference = MaxScore - Score.x) %>%
#Since the Difference column mutated I can use Difference column to filter and orderby and finally I will choose the necessary columns
filter(Difference>50)%>%
arrange(desc(Difference))%>%
#Here, since I applied join 2 times some column names were same.that's why they are automatically assigned name for instance Id.x,Id.y
#Since as last I did JOIN POST with FIRST JOIN'S RESULTING data frame the variables has .x belong to POST Data frame and .y is the other one
#According to this I chose the variables from the tables I should choose.
select(Id=Id.y,Title=Title.y,MaxScore,AcceptedScore=Score.x,Difference)
return(result_dplyr5)
result_dplyr5
best_answers <- aggregate(Score ~ ParentId, data = subset(posts, PostTypeId == 2), max)
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), max)
# Joining BestAnswers with Questions
merged_data <- merge(best_answers, subset(posts, PostTypeId == 1), by.x = "ParentId", by.y = "Id")
#I will start finding BestAnswers dataframe
# Subquery for BestAnswers
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), max)
# Joining BestAnswers with Questions
merged_data <- merge(best_answers, subset(Posts, PostTypeId == 1), by.x = "ParentId", by.y = "Id")
# Joining with Posts on AcceptedAnswerId
merged_data <- merge(merged_data, posts, by.x = "AcceptedAnswerId", by.y = "Id")
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), max)
# Joining BestAnswers with Questions
merged_data <- merge(best_answers, subset(Posts, PostTypeId == 1), by.x = "ParentId", by.y = "Id")
merged_data <- merge(merged_data, posts, by.x = "AcceptedAnswerId", by.y = "Id")
merged_data <- merge(merged_data, Posts, by.x = "AcceptedAnswerId", by.y = "Id")
# Calculating Difference
merged_data$Difference <- merged_data$MaxScore - merged_data$Score
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), max)
# Joining BestAnswers with Questions
merged_data <- merge(best_answers, subset(Posts, PostTypeId == 1), by.x = "ParentId", by.y = "Id")
# Joining with Posts on AcceptedAnswerId
merged_data <- merge(merged_data, Posts, by.x = "AcceptedAnswerId", by.y = "Id")
# Calculating Difference
merged_data$Difference <- merged_data$MaxScore - merged_data$Score
Answers_filtered_base5 <- Posts[Posts$PostTypeId == 2, ]
# Using by to find the Id with the maximum score for each ParentId
bestAnswers_base5 <- aggregate(Score ~ ParentId, data = Answers_filtered_base5, FUN = function(x) {
max_score<-Answers_filtered_base5$Id[which.max(x)]
max_score_index <- which.max(x)
max_score <- max(x)
id <- Answers_filtered_base5$Id[max_score_index]
c(Id = id, MaxScore = max_score)
})
colnames(bestAnswers_base5) <- c("ParentId", "Id", "MaxScore")
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
# Questions part
questions <- subset(Posts, PostTypeId == 1)
# Joining Questions and BestAnswers
question_best_ans_join <- merge(questions, best_answers, by.x = "Id", by.y = "ParentId")
# Joining again with Posts
join_data <- merge(Posts, question_best_ans_join, by.x = "Id", by.y = "AcceptedAnswerId")
# Calculating Difference
join_data$Difference <- join_data$MaxScore - join_data$Score.x
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
best_answers
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
Posts <- read.csv("travel_stackexchange/Posts.csv.gz")
Users <- read.csv("travel_stackexchange/Users.csv.gz")
PostsLinks <- read.csv("travel_stackexchange/PostLinks.csv.gz")
Comments <- read.csv("travel_stackexchange/Comments.csv.gz")
library(dplyr)
library(data.table)
library(microbenchmark)
library(ggplot2)
library(compare)
library(sqldf)
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
BestAnswers_dplyr5 <- Posts %>%
#filtering by posttypeid
filter(PostTypeId == 2) %>%
#Groupping by parent Id
group_by(ParentId)%>%
#Finding the Id which has max score for each parentId and the Max score's itself
summarise(Id= Id[which.max(Score)],MaxScore = max(Score))%>%
#relocating the columns as in the sqldf result
relocate(c("Id","ParentId","MaxScore"))
questions <- subset(Posts, PostTypeId == 1)
# Joining Questions and BestAnswers
question_best_ans_join <- merge(questions, best_answers, by.x = "Id", by.y = "ParentId")
# Joining again with Posts
join_data <- merge(Posts, question_best_ans_join, by.x = "Id", by.y = "AcceptedAnswerId")
# Calculating Difference
join_data$Difference <- join_data$MaxScore - join_data$Score.x
join_data$Difference <- join_data$MaxScore - join_data$Score.x
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
# Questions part
questions <- subset(Posts, PostTypeId == 1)
# Joining Questions and BestAnswers
question_best_ans_join <- merge(questions, best_answers, by.x = "Id", by.y = "ParentId")
# Joining again with Posts
join_data <- merge(Posts, question_best_ans_join, by.x = "Id", by.y = "AcceptedAnswerId")
# Calculating Difference
join_data$Difference <- join_data$MaxScore - join_data$Score.y
best_answers <- aggregate(Score ~ ParentId, data = subset(Posts, PostTypeId == 2), function(x) {
id <- which.max(x)
c(Id = Posts$Id[id], MaxScore = max(x))
})
# Questions part
questions <- subset(Posts, PostTypeId == 1)
# Joining Questions and BestAnswers
question_best_ans_join <- merge(questions, best_answers, by.x = "Id", by.y = "ParentId")
# Joining again with Posts
join_data <- merge(Posts, question_best_ans_join, by.x = "Id", by.y = "AcceptedAnswerId")
# Calculating Difference
join_data$Difference <- join_data$MaxScore - join_data$Score
